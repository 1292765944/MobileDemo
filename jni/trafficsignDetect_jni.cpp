/* DO NOT EDIT THIS FILE - it is machine generated */
#include <trafficsignDetect_jni.h>
/* Header for class com_baidu_trafficsigndetect_TrafficsignDetect */

#include <opencv2/opencv.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/contrib/detection_based_tracker.hpp>

#include <string>
#include <vector>

#include <android/log.h>

#include "util.h"

using namespace std;
using namespace cv;

inline void vector_Rect_to_Mat(vector<Rect>& v_rect, Mat& mat)
{
    mat = Mat(v_rect, true);
}

//#ifndef _Included_com_baidu_trafficsigndetect_TrafficsignDetect
//#define _Included_com_baidu_trafficsigndetect_TrafficsignDetect

/*
 * Class:     com_baidu_trafficsigndetect_TrafficsignDetect
 * Method:    nativeCreateObject
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_baidu_trafficsigndetect_TrafficsignDetect_nativeCreateObject
  (JNIEnv * jenv, jclass, jstring jFileName)
{
    LOGD("Java_com_baidu_trafficsigndetect_TrafficsignDetect_nativeCreateObject enter");
    const char* jnamestr = jenv->GetStringUTFChars(jFileName, NULL);
    string stdFileName(jnamestr);
    jlong result = 0;

    try
    {
        DetectionBasedTracker::Parameters DetectorParams;
        DetectorParams.maxObjectSize = 180;
        DetectorParams.minObjectSize = 50;
        DetectorParams.scaleFactor = 1.3;
        result = (jlong)new DetectionBasedTracker(stdFileName, DetectorParams);
    }
    catch(cv::Exception& e)
    {
        LOGD("nativeCreateObject caught cv::Exception: %s", e.what());
        jclass je = jenv->FindClass("org/opencv/core/CvException");
        if(!je)
            je = jenv->FindClass("java/lang/Exception");
        jenv->ThrowNew(je, e.what());
    }
    catch (...)
    {
        LOGD("nativeCreateObject caught unknown exception");
        jclass je = jenv->FindClass("java/lang/Exception");
        jenv->ThrowNew(je, "Unknown exception in JNI code of DetectionBasedTracker.nativeCreateObject()");
        return 0;
    }

    LOGD("Java_com_baidu_trafficsigndetect_TrafficsignDetect_nativeCreateObject exit");
    return result;
}

/*
 * Class:     com_baidu_trafficsigndetect_TrafficsignDetect
 * Method:    nativeDestroyObject
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_baidu_trafficsigndetect_TrafficsignDetect_nativeDestroyObject
  (JNIEnv * jenv, jclass, jlong thiz)
{
    LOGD("Java_com_baidu_trafficsigndetect_TrafficsignDetect_nativeDestroyObject enter");
    try
    {
        if(thiz != 0)
        {
            ((DetectionBasedTracker*)thiz)->stop();
            delete (DetectionBasedTracker*)thiz;
        }
    }
    catch(cv::Exception& e)
    {
        LOGD("nativeestroyObject caught cv::Exception: %s", e.what());
        jclass je = jenv->FindClass("org/opencv/core/CvException");
        if(!je)
            je = jenv->FindClass("java/lang/Exception");
        jenv->ThrowNew(je, e.what());
    }
    catch (...)
    {
        LOGD("nativeDestroyObject caught unknown exception");
        jclass je = jenv->FindClass("java/lang/Exception");
        jenv->ThrowNew(je, "Unknown exception in JNI code of DetectionBasedTracker.nativeDestroyObject()");
    }
    LOGD("Java_com_baidu_trafficsigndetect_TrafficsignDetect_nativeDestroyObject exit");
}

/*
 * Class:     com_baidu_trafficsigndetect_TrafficsignDetect
 * Method:    nativeStart
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_baidu_trafficsigndetect_TrafficsignDetect_nativeStart
  (JNIEnv * jenv, jclass, jlong thiz)
{
    LOGD("Java_com_baidu_trafficsigndetect_TrafficsignDetect_nativeStart enter");
    try
    {
        ((DetectionBasedTracker*)thiz)->run();
    }
    catch(cv::Exception& e)
    {
        LOGD("nativeStart caught cv::Exception: %s", e.what());
        jclass je = jenv->FindClass("org/opencv/core/CvException");
        if(!je)
            je = jenv->FindClass("java/lang/Exception");
        jenv->ThrowNew(je, e.what());
    }
    catch (...)
    {
        LOGD("nativeStart caught unknown exception");
        jclass je = jenv->FindClass("java/lang/Exception");
        jenv->ThrowNew(je, "Unknown exception in JNI code of DetectionBasedTracker.nativeStart()");
    }
    LOGD("Java_com_baidu_trafficsigndetect_TrafficsignDetect_nativeStart exit");
}

/*
 * Class:     com_baidu_trafficsigndetect_TrafficsignDetect
 * Method:    nativeStop
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_baidu_trafficsigndetect_TrafficsignDetect_nativeStop
  (JNIEnv * jenv, jclass, jlong thiz)
{
    LOGD("Java_com_baidu_trafficsigndetect_TrafficsignDetect_nativeStop enter");
    try
    {
        ((DetectionBasedTracker*)thiz)->stop();
    }
    catch(cv::Exception& e)
    {
        LOGD("nativeStop caught cv::Exception: %s", e.what());
        jclass je = jenv->FindClass("org/opencv/core/CvException");
        if(!je)
            je = jenv->FindClass("java/lang/Exception");
        jenv->ThrowNew(je, e.what());
    }
    catch (...)
    {
        LOGD("nativeStop caught unknown exception");
        jclass je = jenv->FindClass("java/lang/Exception");
        jenv->ThrowNew(je, "Unknown exception in JNI code of DetectionBasedTracker.nativeStop()");
    }
    LOGD("Java_com_baidu_trafficsigndetect_TrafficsignDetect_nativeStop exit");
}

/*
 * Class:     com_baidu_trafficsigndetect_TrafficsignDetect
 * Method:    nativeDetect
 * Signature: (JJJ)V
 */
JNIEXPORT void JNICALL Java_com_baidu_trafficsigndetect_TrafficsignDetect_nativeDetect
  (JNIEnv * jenv, jclass, jlong thiz, jlong imageGray, jlong signs)
{
    LOGD("Java_org_opencv_samples_facedetect_DetectionBasedTracker_nativeDetect enter");
    try
    {
        vector<Rect> RectFaces;
        ((DetectionBasedTracker*)thiz)->process(*((Mat*)imageGray));
        ((DetectionBasedTracker*)thiz)->getObjects(RectFaces);
        vector_Rect_to_Mat(RectFaces, *((Mat*)signs));
    }
    catch(cv::Exception& e)
    {
        LOGD("nativeCreateObject caught cv::Exception: %s", e.what());
        jclass je = jenv->FindClass("org/opencv/core/CvException");
        if(!je)
            je = jenv->FindClass("java/lang/Exception");
        jenv->ThrowNew(je, e.what());
    }
    catch (...)
    {
        LOGD("nativeDetect caught unknown exception");
        jclass je = jenv->FindClass("java/lang/Exception");
        jenv->ThrowNew(je, "Unknown exception in JNI code DetectionBasedTracker.nativeDetect()");
    }
    LOGD("Java_org_opencv_samples_facedetect_DetectionBasedTracker_nativeDetect exit");
}


//#endif
